%Task 3 Part 1
%Load OFDM format file
clear all
close all

%add path
addpath ./mex;
load("OFDM_PILOT.mat"); 
load("ofdm_map.mat");
load("benchmark_Zw_172648_1.mat")
load("benchmark_NoiseVar_172648_1.mat")
load("benchmark_Zw_172648_2.mat")
load("benchmark_NoiseVar_172648_2.mat")
load("benchmark_Zw_172648_3.mat")
load("benchmark_NoiseVar_172648_3.mat")



k_p = 512; %number of pilot subcarriers
S_N = 112; %number of null subcarriers
num_ofdm = 21;%number of ofdm symbols
k=2048; %total number of ofdm subcarriers
z_w = bb_rece_data_172648_1474(1:end,1:end);
z_w_2 = bb_rece_data_172648_1475(1:end,1:end);
z_w_3 = bb_rece_data_172648_1476(1:end,1:end);

pilot_map = ofdm_map;
pilot_symbol = OFDM_PILOT(1:end,1);

%1st
z_p_w = zeros(k_p, num_ofdm);
z_null= zeros(112, num_ofdm);
d_p_w = zeros(k_p,num_ofdm);

%2nd
z_p_w_2 = zeros(k_p, num_ofdm);
z_null_2= zeros(112, num_ofdm);

%3rd
z_p_w_3 = zeros(k_p, num_ofdm);
z_null_3= zeros(112, num_ofdm);

L = 200;
v = ones(k_p,L);
for v_index_coloum =1:L
     for v_index_row = 1:k_p
         v(v_index_row, v_index_coloum) = exp(-1j * 2*pi*((v_index_row - 1) * (v_index_coloum-1))/k_p);
     end
end

%v2 for all subcarriers
v2 = ones(k,L);
for v_index_coloum =1:L
     for v_index_row = 1:k
         v2(v_index_row, v_index_coloum) = exp(-1j * 2*pi*((v_index_row - 1) * (v_index_coloum-1))/k);
     end
end

%1st
h_ls = zeros(L,num_ofdm);
z_data=zeros(1420, 21);
H_w = zeros(2048,21);

%2nd
h_ls_2 = zeros(L,num_ofdm);
z_data_2=zeros(1420, 21);
H_w_2 = zeros(2048,21);

%3rd
h_ls_3 = zeros(L,num_ofdm);
z_data_3=zeros(1420, 21);
H_w_3 = zeros(2048,21);

for ofdm_index =1:num_ofdm
    index = 0;
    index_null=0;
    for x=1:2048
        if(pilot_map(x) == 1)
            index=index+1;
            z_p_w(index,ofdm_index)=z_w(x,ofdm_index);
            d_p_w(index,ofdm_index) =pilot_symbol(x,1);

            z_p_w_2(index,ofdm_index)=z_w_2(x,ofdm_index);
            z_p_w_3(index,ofdm_index)=z_w_3(x,ofdm_index);
  
        end

        if(pilot_map(x) == 0)
            index_null=index_null+1;
            z_null(index_null, ofdm_index)=z_w(x, ofdm_index);
            z_null_2(index_null, ofdm_index)=z_w_2(x, ofdm_index);
            z_null_3(index_null, ofdm_index)=z_w_3(x, ofdm_index);
        end
    end
end

for h_ls_index = 1:num_ofdm
    diag_d = diag(d_p_w(:,h_ls_index));
    h_ls(:,h_ls_index) = (1/k_p)*v' * diag_d' *z_p_w(:,h_ls_index);
    h_ls_2(:,h_ls_index) = (1/k_p)*v' * diag_d' *z_p_w_2(:,h_ls_index);
    h_ls_3(:,h_ls_index) = (1/k_p)*v' * diag_d' *z_p_w_3(:,h_ls_index);


end
%figure(1),plot(abs(z_w(:, 1)))
H=v2*h_ls;
H_2 = v2*h_ls_2;
H_3 = v2*h_ls_3;
%figure(), plot(abs(H(:, 1)))

%Calculate Variance
two_sigma_square = (1/S_N)*sum(abs(z_null).^2);
two_sigma_square_2 = (1/S_N)*sum(abs(z_null_2).^2);
two_sigma_square_3 = (1/S_N)*sum(abs(z_null_3).^2);

%******************one-tap equalizer
H_data = zeros(1420,21);
H_data_2 = zeros(1420,21);
H_data_3 = zeros(1420,21);
%Extract data subcarrier frequency response from Hw
for num = 1:num_ofdm
    index_data = 0;
    for x=1:k
        if(pilot_map(x) == 2)
            index_data=index_data+1;
            %1st
            z_data(index_data, num)=z_w(x, num);
            H_data(index_data, num)=H(x, num);
            %2nd
            z_data_2(index_data, num)=z_w_2(x, num);
            H_data_2(index_data, num)=H_2(x, num);
            %3rd
            z_data_3(index_data, num)=z_w_3(x, num);
            H_data_3(index_data, num)=H_3(x, num);
        end
    end
end 

%%%%%%%%%%%%%%%%%%%%%%%%
% Log-Likelihood Ratio %
%%%%%%%%%%%%%%%%%%%%%%%%
%b1_zd = real(z_data); %Split Z_data into real and imag components
%b2_zd = imag(z_data);

x1=(1+1j)/sqrt(2);
x2=(-1+1j)/sqrt(2);
x3=(1-1j)/sqrt(2);
x4=(-1-1j)/sqrt(2);
A1 = zeros(1420,21);
B1 = zeros(1420,21);
C1 = zeros(1420,21);
D1 = zeros(1420,21);

%2nd
A1_2 = zeros(1420,21);
B1_2 = zeros(1420,21);
C1_2 = zeros(1420,21);
D1_2 = zeros(1420,21);

%3rd
A1_3 = zeros(1420,21);
B1_3 = zeros(1420,21);
C1_3 = zeros(1420,21);
D1_3 = zeros(1420,21);

% checkers=ones(1420, 21);
% array = [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22];
% lion = checkers./array;

%*************************Write as this form in order to debug**********
for ML_index_ofdm = 1 : num_ofdm
    for ML_index  = 1:1420
        %1st
        A1(ML_index,ML_index_ofdm)=-(abs(z_data(ML_index,ML_index_ofdm)-H_data(ML_index,ML_index_ofdm)*x1).^2)./two_sigma_square(ML_index_ofdm); 
        B1(ML_index,ML_index_ofdm)=-(abs(z_data(ML_index,ML_index_ofdm)-H_data(ML_index,ML_index_ofdm)*x2).^2)./two_sigma_square(ML_index_ofdm); 
        C1(ML_index,ML_index_ofdm)=-(abs(z_data(ML_index,ML_index_ofdm)-H_data(ML_index,ML_index_ofdm)*x3).^2)./two_sigma_square(ML_index_ofdm); 
        D1(ML_index,ML_index_ofdm)=-(abs(z_data(ML_index,ML_index_ofdm)-H_data(ML_index,ML_index_ofdm)*x4).^2)./two_sigma_square(ML_index_ofdm); 
        %2nd
        A1_2(ML_index,ML_index_ofdm)=-(abs(z_data_2(ML_index,ML_index_ofdm)-H_data_2(ML_index,ML_index_ofdm)*x1).^2)./two_sigma_square_2(ML_index_ofdm); 
        B1_2(ML_index,ML_index_ofdm)=-(abs(z_data_2(ML_index,ML_index_ofdm)-H_data_2(ML_index,ML_index_ofdm)*x2).^2)./two_sigma_square_2(ML_index_ofdm); 
        C1_2(ML_index,ML_index_ofdm)=-(abs(z_data_2(ML_index,ML_index_ofdm)-H_data_2(ML_index,ML_index_ofdm)*x3).^2)./two_sigma_square_2(ML_index_ofdm); 
        D1_2(ML_index,ML_index_ofdm)=-(abs(z_data_2(ML_index,ML_index_ofdm)-H_data_2(ML_index,ML_index_ofdm)*x4).^2)./two_sigma_square_2(ML_index_ofdm);
        %3rd
        A1_3(ML_index,ML_index_ofdm)=-(abs(z_data_3(ML_index,ML_index_ofdm)-H_data_3(ML_index,ML_index_ofdm)*x1).^2)./two_sigma_square_3(ML_index_ofdm); 
        B1_3(ML_index,ML_index_ofdm)=-(abs(z_data_3(ML_index,ML_index_ofdm)-H_data_3(ML_index,ML_index_ofdm)*x2).^2)./two_sigma_square_3(ML_index_ofdm); 
        C1_3(ML_index,ML_index_ofdm)=-(abs(z_data_3(ML_index,ML_index_ofdm)-H_data_3(ML_index,ML_index_ofdm)*x3).^2)./two_sigma_square_3(ML_index_ofdm); 
        D1_3(ML_index,ML_index_ofdm)=-(abs(z_data_3(ML_index,ML_index_ofdm)-H_data_3(ML_index,ML_index_ofdm)*x4).^2)./two_sigma_square_3(ML_index_ofdm); 
    end
end
%******************************************************************

%above code is same as below

%A2=(abs(b2_zd-H_data*(x1)).^2)./two_sigma_square; 
%B2=(abs(b2_zd-H_data*(x2)).^2)./two_sigma_square;
%C2=(abs(b2_zd-H_data*(x3)).^2)./two_sigma_square;
%D2=(abs(b2_zd-H_data*(x4)).^2)./two_sigma_square;
%1st
MLLR_b1= ((max(A1,C1) + log(1+exp(-abs(C1-A1)))) - (max(B1,D1) + log(1+exp(-abs(D1-B1)))));
MLLR_b2= ((max(A1,B1) + log(1+exp(-abs(B1-A1)))) - (max(C1,D1) + log(1+exp(-abs(D1-C1)))));
%2nd
MLLR_b1_2= ((max(A1_2,C1_2) + log(1+exp(-abs(C1_2-A1_2)))) - (max(B1_2,D1_2) + log(1+exp(-abs(D1_2-B1_2)))));
MLLR_b2_2= ((max(A1_2,B1_2) + log(1+exp(-abs(B1_2-A1_2)))) - (max(C1_2,D1_2) + log(1+exp(-abs(D1_2-C1_2)))));
%3rd
MLLR_b1_3= ((max(A1_3,C1_3) + log(1+exp(-abs(C1_3-A1_3)))) - (max(B1_3,D1_3) + log(1+exp(-abs(D1_3-B1_3)))));
MLLR_b2_3= ((max(A1_3,B1_3) + log(1+exp(-abs(B1_3-A1_3)))) - (max(C1_3,D1_3) + log(1+exp(-abs(D1_3-C1_3)))));

LR=reshape([MLLR_b1.';MLLR_b2.'], 21, []).';
LR_2=reshape([MLLR_b1_2.';MLLR_b2_2.'], 21, []).';
LR_3=reshape([MLLR_b1_3.';MLLR_b2_3.'], 21, []).';


% mat1=[1 1 1 1; 2 2 2 2; 3 3 3 3].';
% mat2=[0 0 0 0; 10 10 10 10; 0 0 0 0].';
% mat3=reshape([mat1;mat2], size(mat1,1), []).';
% mat3

% Decoder %
NAME='./5G_LDPC_M10_N20_Z142_Q2_nonVer.txt';
[address, LDPC_INFOLEN]=ldpc_mex_initial_CAPI([1420,2840,2], NAME);
load("INTRLVR.mat");
load("CODE.mat");
bit_err_total=0;
BLER_total=0;
bit_err_total_2=0;
BLER_total_2=0;
bit_err_total_3=0;
BLER_total_3=0;
for i=2:num_ofdm

    LR_in_de = zeros(length(LR), 1);
    LR_in_de_2 = zeros(length(LR_2), 1);
    LR_in_de_3 = zeros(length(LR_3), 1);

    LR_in_de(INTRLVR)=LR(:,i);
    LR_in_de_2(INTRLVR)=LR_2(:,i);
    LR_in_de_3(INTRLVR)=LR_3(:,i);

    APP_code=ldpcDecoder_CAPI(address, LR_in_de);
    APP_code_2=ldpcDecoder_CAPI(address, LR_in_de_2);
    APP_code_3=ldpcDecoder_CAPI(address, LR_in_de_3);

    est_code=(APP_code<0);
    est_code_2=(APP_code_2<0);
    est_code_3=(APP_code_3<0);

    bec=sum(abs(est_code-CODE(:,i)));
    bec_2=sum(abs(est_code_2-CODE(:,i)));
    bec_3=sum(abs(est_code_3-CODE(:,i)));

    bit_err_total = bit_err_total+bec; 
    bit_err_total_2 = bit_err_total_2+bec_2; 
    bit_err_total_3 = bit_err_total_3+bec_3; 

    if bec ~= 0
        BLER_total=BLER_total+1;
    end
    if bec_2 ~= 0
        BLER_total_2=BLER_total_2+1;
    end
    if bec_3 ~= 0
        BLER_total_3=BLER_total_3+1;
    end
end 
BLER = BLER_total/20;
BLER_2 = BLER_total_2/20;
BLER_3 = BLER_total_3/20;

BER=bit_err_total/(2840*20);
BER_2=bit_err_total_2/(2840*20);
BER_3=bit_err_total_3/(2840*20);
%***************MRCC*************

%h_k = [H_data,H_data_2,H_data_3];
H_k_magnitude = zeros(1420,21);
q_k = zeros(1420,21);
noise_var=zeros(1420,21);

for MRCC_index = 1 : num_ofdm
    for index=1:1420
  %con = (H_data(:,MRCC_index))';
  H_k_magnitude(index,MRCC_index)  = sqrt((H_data(index,MRCC_index)' * H_data(index,MRCC_index)) + (H_data_2(index,MRCC_index)' * H_data_2(index,MRCC_index)) + (H_data_3(index,MRCC_index)' * H_data_3(index,MRCC_index)));

  q_k(index,MRCC_index) = [H_data(index, MRCC_index)' H_data_2(index, MRCC_index)' H_data_3(index, MRCC_index)']...
      *[z_data(index,MRCC_index); z_data_2(index,MRCC_index); z_data_3(index,MRCC_index)]/H_k_magnitude(index, MRCC_index);

  noise_var(index,MRCC_index)=(1/abs(H_k_magnitude(index, MRCC_index))^2)*(two_sigma_square(MRCC_index)*abs(H_data(index,MRCC_index))^2 ...
      +two_sigma_square_2(MRCC_index)*abs(H_data_2(index,MRCC_index))^2+two_sigma_square_3(MRCC_index)*abs(H_data_3(index,MRCC_index))^2);
    end
end


%LogLikelihood Ratio
%%%%%%%%%%%%%%%%%%%%%%%%
% Log-Likelihood Ratio %
%%%%%%%%%%%%%%%%%%%%%%%%
%b1_zd = real(z_data); %Split Z_data into real and imag components
%b2_zd = imag(z_data);

x1=(1+1j)/sqrt(2);
x2=(-1+1j)/sqrt(2);
x3=(1-1j)/sqrt(2);
x4=(-1-1j)/sqrt(2);
A1 = zeros(1420,21);
B1 = zeros(1420,21);
C1 = zeros(1420,21);
D1 = zeros(1420,21);

%2nd
A1_2 = zeros(1420,21);
B1_2 = zeros(1420,21);
C1_2 = zeros(1420,21);
D1_2 = zeros(1420,21);

%3rd
A1_3 = zeros(1420,21);
B1_3 = zeros(1420,21);
C1_3 = zeros(1420,21);
D1_3 = zeros(1420,21);

% checkers=ones(1420, 21);
% array = [2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22];
% lion = checkers./array;

%*************************Write as this form in order to debug**********
for ML_index_ofdm = 1 : num_ofdm
    for ML_index  = 1:1420
        %1st
        A1(ML_index,ML_index_ofdm)=-(abs(q_k(ML_index,ML_index_ofdm)-H_k_magnitude(ML_index,ML_index_ofdm)*x1).^2)./noise_var(index, ML_index_ofdm); 
        B1(ML_index,ML_index_ofdm)=-(abs(q_k(ML_index,ML_index_ofdm)-H_k_magnitude(ML_index,ML_index_ofdm)*x2).^2)./noise_var(index, ML_index_ofdm); 
        C1(ML_index,ML_index_ofdm)=-(abs(q_k(ML_index,ML_index_ofdm)-H_k_magnitude(ML_index,ML_index_ofdm)*x3).^2)./noise_var(index, ML_index_ofdm); 
        D1(ML_index,ML_index_ofdm)=-(abs(q_k(ML_index,ML_index_ofdm)-H_k_magnitude(ML_index,ML_index_ofdm)*x4).^2)./noise_var(index, ML_index_ofdm); 
    end
end
%******************************************************************

%above code is same as below

%A2=(abs(b2_zd-H_data*(x1)).^2)./two_sigma_square; 
%B2=(abs(b2_zd-H_data*(x2)).^2)./two_sigma_square;
%C2=(abs(b2_zd-H_data*(x3)).^2)./two_sigma_square;
%D2=(abs(b2_zd-H_data*(x4)).^2)./two_sigma_square;
%1st
MLLR_b1= ((max(A1,C1) + log(1+exp(-abs(C1-A1)))) - (max(B1,D1) + log(1+exp(-abs(D1-B1)))));
MLLR_b2= ((max(A1,B1) + log(1+exp(-abs(B1-A1)))) - (max(C1,D1) + log(1+exp(-abs(D1-C1)))));

LR=reshape([MLLR_b1.';MLLR_b2.'], 21, []).';


% mat1=[1 1 1 1; 2 2 2 2; 3 3 3 3].';
% mat2=[0 0 0 0; 10 10 10 10; 0 0 0 0].';
% mat3=reshape([mat1;mat2], size(mat1,1), []).';
% mat3

% Decoder %
NAME='./5G_LDPC_M10_N20_Z142_Q2_nonVer.txt';
[address, LDPC_INFOLEN]=ldpc_mex_initial_CAPI([1420,2840,2], NAME);
load("INTRLVR.mat");
load("CODE.mat");
bit_err_total=0;
BLER_total=0;
bit_err_total_2=0;
BLER_total_2=0;
bit_err_total_3=0;
BLER_total_3=0;
for i=2:num_ofdm

    LR_in_de = zeros(length(LR), 1);

    LR_in_de(INTRLVR)=LR(:,i);

    APP_code=ldpcDecoder_CAPI(address, LR_in_de);

    est_code=(APP_code<0);
   

    bec=sum(abs(est_code-CODE(:,i)));
  
    bit_err_total = bit_err_total+bec; 
    
    if bec ~= 0
        BLER_total=BLER_total+1;
    end
   
end 
BLER = BLER_total/20;

BER=bit_err_total/(2840*20);



